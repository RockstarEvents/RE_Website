version: '3.5'

services:
  caddy_reverse_proxy:
    # Use the caddy:latest image from Docker Hub
    image: caddy:latest
    # Restart policy: restart the container unless explicitly stopped
    restart: unless-stopped
    container_name: caddy_proxy
    # ports for Caddy
    ports:
      - 80:80
      - 443:443
    volumes:
      # Mount the host Caddyfile
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    # Connect the Caddy container caddy_net
    networks:
      - caddy_net
#    nextjs_app: //фронтенд
#      # Remote Docker Hub image
#      image: rosechege/nextjs-app:latest
#      pull_policy: always
#      restart: always
      # Connect the container to the existing Docker network caddy_net

  postgres:
    image: postgres
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - ./postgres-init-scripts:/docker-entrypoint-initdb.d  # Монтируем папку с скриптами
    command: ["postgres", "-c", "log_statement=all"]  # Опционально, для отладки SQL запросов

      
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    container_name: kafka
    image: wurstmeister/kafka:2.12-2.2.1
    environment:
      KAFKA_ADVERTISED_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://kafka:19092, 
        LISTENER_DOCKER_EXTERNAL://localhost:9092

      KAFKA_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://:19092,
        LISTENER_DOCKER_EXTERNAL://:9092

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >-
        LISTENER_DOCKER_INTERNAL:PLAINTEXT,
        LISTENER_DOCKER_EXTERNAL:PLAINTEXT

      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: >-
        kafka.controller=INFO,
        kafka.producer.async.DefaultEventHandler=INFO,
        state.change.logger=INFO

    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=redispassword
      - REDIS_PORT=6379
      - REDIS_DATABASES=16

  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9090"
    restart: always
    ports:
      - "9000:9000"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=miniopassword
  
  my-go-app:
    build:
      context: ../
      dockerfile: Dockerfile
    container_name: my-go-app
    restart: always
    ports:
      - "8082:8082"
    depends_on:
      - postgres
      - zookeeper
      - kafka
      - redis
      - minio
    environment:
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      KAFKA_BROKER: kafka:9092
      REDIS_HOST: redis
      REDIS_PASSWORD: redispassword
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: miniopassword

volumes:
  caddy_data:
  caddy_config:

networks:
  caddy_net: